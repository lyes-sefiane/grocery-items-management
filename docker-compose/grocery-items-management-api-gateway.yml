services:
  grocery-items-management-api-gateway:
    image: lsefiane/grocery-items-management-api-gateway:latest
    container_name: grocery-items-management-api-gateway
    restart: unless-stopped
    pull_policy: always
    read_only: false
    ports:
      - ${GROCERY_ITEMS_MANAGEMENT_API_GATEWAY_PORT}:${GROCERY_ITEMS_MANAGEMENT_API_GATEWAY_PORT}
    networks:
      - grocery-items-management-application
    depends_on:
      - grocery-items-management
    environment:
      # Active Profile
      - spring.profiles.active=${SPRING_PROFILES_ACTIVE}
      # Application
      - spring.application.name=${GROCERY_ITEMS_MANAGEMENT_API_GATEWAY}
      # Redis
      - spring.data.redis.repositories.enabled=${SPRING_DATA_REDIS_REPOSITORIES_ENABLED}
      - spring.cache.type=${SPRING_CACHE_TYPE_NONE}
      - spring.data.redis.database=${SPRING_DATA_REDIS_DATABASE}
      - spring.data.redis.host=${SPRING_DATA_REDIS_HOST}
      - spring.data.redis.port=${SPRING_DATA_REDIS_PORT}
      - spring.data.redis.password=${SPRING_DATA_REDIS_PASSWORD}
      - spring.data.redis.timeout=${SPRING_DATA_REDIS_TIMEOUT}
      # Spring Cloud Gateway
        ## Routes
      - spring.cloud.gateway.routes[0].id=${SPRING_CLOUD_GATEWAY_ROUTES_0_ID}
      - spring.cloud.gateway.routes[0].uri=${SPRING_CLOUD_GATEWAY_ROUTES_0_URI}
      - spring.cloud.gateway.routes[0].predicates[0]=${SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0}
      - spring.cloud.gateway.routes[0].predicates[1]=${SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_1}
      - spring.cloud.gateway.routes[0].filters[0].name=${SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0_NAME}
      - spring.cloud.gateway.routes[0].filters[0].args[redis-rate-limiter.replenishRate]=${SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0_ARGS_REDIS_RATE_LIMITER_REPLENISHRATE}
      - spring.cloud.gateway.routes[0].filters[0].args[redis-rate-limiter.burstCapacity]=${SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0_ARGS_REDIS_RATE_LIMITER_BURSTCAPACITY}
      - spring.cloud.gateway.routes[0].filters[0].args[redis-rate-limiter.requestedTokens]=${SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0_ARGS_REDIS_RATE_LIMITER_REQUESTEDTOKENS}
      - spring.cloud.gateway.routes[0].filters[0].args[key-resolver]=${SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0_ARGS_KEY_RESOLVER}
        ## Retry
      - spring.cloud.gateway.routes[0].filters[1].name=${spring_cloud_gateway_routes_0_filters_1_name}
      - spring.cloud.gateway.routes[0].filters[1].args[retries]=${spring_cloud_gateway_routes_0_filters_1_args_retries}
      - spring.cloud.gateway.routes[0].filters[1].args[statuses]=${spring_cloud_gateway_routes_0_filters_1_args_statuses}
      - spring.cloud.gateway.routes[0].filters[1].args[methods]=${spring_cloud_gateway_routes_0_filters_1_args_methods}
      - spring.cloud.gateway.routes[0].filters[1].args[backoff.firstBackoff]=${spring_cloud_gateway_routes_0_filters_1_args_backoff_firstBackoff}
      - spring.cloud.gateway.routes[0].filters[1].args[backoff.maxBackoff]=${spring_cloud_gateway_routes_0_filters_1_args_backoff_maxBackoff}
      - spring.cloud.gateway.routes[0].filters[1].args[backoff.factor]=${spring_cloud_gateway_routes_0_filters_1_args_backoff_factor}
      - spring.cloud.gateway.routes[0].filters[1].args[backoff.basedOnPreviousValue]=${spring_cloud_gateway_routes_0_filters_1_args_backoff_basedOnPreviousValue}
        ## CircuitBreaker
      - spring.cloud.gateway.routes[0].filters[2].name=${spring_cloud_gateway_routes_0_filters_2_name}
      - spring.cloud.gateway.routes[0].filters[2].args[name]=${spring_cloud_gateway_routes_0_filters_2_args_name}
      - spring.cloud.gateway.routes[0].filters[2].args[fallbackUri]=${spring_cloud_gateway_routes_0_filters_2_args_fallbackUri}
      # Consul
      - spring.cloud.consul.enabled=${SPRING_CLOUD_CONSUL_ENABLED}
      - spring.cloud.consul.host=${SPRING_CLOUD_CONSUL_HOST}
      - spring.cloud.consul.port=${SPRING_CLOUD_CONSUL_PORT}
      # Spring Cloud Consul
      - spring.cloud.consul.discovery_register=${SPRING_CLOUD_CONSUL_DISCOVERY_REGISTER}
      - spring.cloud.gateway.discovery.locator.enabled=${SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED}
      # Zipkin
      - management.tracing.enabled=${MANAGEMENT_TRACING_ENABLED}
      - management.zipkin.tracing.endpoint=${MANAGEMENT_ZIPKIN_TRACING_ENDPOINT}
      - management.tracing.sampling.probability=${MANAGEMENT_TRACING_SAMPLING_PROBABILITY}
      # Logging
      - logging.level.org.springframework.web=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB}
      - logging.level.org.springframework.cloud.gateway=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY}
      - logging.level.org.springframework.data.*.*=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_DATA}

networks:
  grocery-items-management-application: