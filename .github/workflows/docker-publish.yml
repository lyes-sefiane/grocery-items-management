# @author  : 'Lyes Sefiane'
# @email   : 'lyes.sefiane@gmail.com'
# @GitHub  : 'https://github.com/lyes-sefiane'
# @Website : 'https://lyes-sefiane.web.app/'

name: Docker Build & Publish

on:
  push:
    branches: ["main", "develop", "feature/*"]
  release:
    types:
      - published

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  BRANCH_TAG: test #${{ github.head_ref || github.ref_name }}
  LATEST_TAG: latest
  SHA_TAG: sha-${{ github.sha }}

jobs:
  sonar-cloud-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=${{ secrets.SONAR_CLOUD_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_CLOUD_ORGANIZATION }}
          projectBaseDir: .
  snyk-maven-analysis:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    needs: [ sonar-cloud-analysis ]
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven-3-jdk-17@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --severity-threshold=low
  maven-build:
    runs-on: ubuntu-latest
    needs: [ snyk-maven-analysis ]
    steps:
      - name: Checkout on Grocery Items Management
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build With Maven
        #working-directory: ./grocery-items-management
        run: mvn clean install -DskipTests

      - name: Upload 'grocery-items-management.jar' Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grocery-items-management
          path: ./grocery-items-management/target/*.jar
          compression-level: 0
          overwrite: true

      - name: Upload 'grocery-items-management-desktop-ui.jar' Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grocery-items-management-desktop-ui
          path: ./grocery-items-management-desktop-ui/target/*.jar
          compression-level: 0
          overwrite: true

      - name: Publish to GitHub Packages Apache Maven
        if: github.event.action == 'published'
        working-directory: ./grocery-items-management-desktop-ui
        run: mvn deploy -DskipTests -s $GITHUB_WORKSPACE/.github/workflows/maven-settings.xml
        env:
          USERNAME: ${{ secrets.USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GROCERY_ITEMS_MANAGEMENT_APPLICATION_ACCESS_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [ maven-build ]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout on Grocery Items Management
        uses: actions/checkout@v4

      - name: Create 'target' Folder
        working-directory: ./grocery-items-management
        run: mkdir target

      - name: Download 'grocery-items-management.jar' Artefact
        uses: actions/download-artifact@v4
        with:
          name: grocery-items-management
          path: ./grocery-items-management/target

      - name: Display Structure Of Downloaded Files
        working-directory: ./grocery-items-management
        run: ls -R target

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Build Docker Image
        working-directory: ./grocery-items-management
        run: docker build . -t  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}}

      - name: Save Docker Image
        working-directory: ./grocery-items-management
        run: docker save --output image.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}}

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ./grocery-items-management/image.tar
          retention-days: 0
          overwrite: true

  docker-publish:
    runs-on: ubuntu-latest
    needs: [ docker-build ]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load --input image.tar

      - name: Log Into DockerHub Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Scout CVES
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: quickview,cves,recommendations
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}}
          ignore-unchanged: true
          only-severities: critical,high,medium,low
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Latest Tag For Published Release Only
        if: github.event.action == 'published'
        run: |
          docker image tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          docker image tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }}

      - name: Push Images
        run: docker push -a ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Docker System Prune
        run: docker system prune --force

      - name: Logout From DockerHub Registry
        run: docker logout
